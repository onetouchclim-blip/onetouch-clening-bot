
import os
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

BOT_TOKEN = os.getenv("BOT_TOKEN")  # –ø–æ–ª—É—á–∏—à—å —É @BotFather
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))  # —Å–≤–æ–π Telegram ID (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)

if not BOT_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

# === –¢–∞—Ä–∏—Ñ—ã (—Ä–∞–∑–æ–≤—ã–µ) ===
RATES = {
    "standard": {"name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞", "per_m2": 9000, "min": 350000, "needs_area": True},
    "general": {"name": "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞", "per_m2": 12000, "min": 700000, "needs_area": True},
    "post_renovation": {"name": "–£–±–æ—Ä–∫–∞ –ø–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", "per_m2": 35000, "min": 2000000, "needs_area": True},
    "clean_start": {"name": "–ß–∏—Å—Ç—ã–π —Å—Ç–∞—Ä—Ç", "per_m2": 20000, "min": 1100000, "needs_area": True},
    "kitchen_bath_standard": {"name": "–ö—É—Ö–Ω—è + —Å–∞–Ω—É–∑–µ–ª (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)", "fixed": 360000, "needs_area": False},
    "kitchen_bath_general": {"name": "–ö—É—Ö–Ω—è + —Å–∞–Ω—É–∑–µ–ª (–≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è)", "fixed": 450000, "needs_area": False},
}

# === –î–æ–ø. —É—Å–ª—É–≥–∏ ===
EXTRAS = {
    "windows_90": {"name": "–û–∫–Ω–∞/–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (90 000 –∑–∞ –µ–¥.)", "type": "per_unit", "price": 90000},
    "windows_110": {"name": "–û–∫–Ω–∞/–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (110 000 –∑–∞ –µ–¥.)", "type": "per_unit", "price": 110000},
    "walls": {"name": "–°—Ç–µ–Ω—ã (270 000 / —á–∞—Å)", "type": "per_hour", "price": 270000},
    "staircase": {"name": "–õ–µ—Å—Ç–Ω–∏—Ü–∞ (130 000 –∑–∞ –µ–¥.)", "type": "per_unit", "price": 130000},
    "ladder": {"name": "–°—Ç—Ä–µ–º—è–Ω–∫–∞ (130 000)", "type": "fixed", "price": 130000},
    "laundry": {"name": "–°—Ç–∏—Ä–∫–∞ (135 000 –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É)", "type": "per_unit", "price": 135000},
    "ironing": {"name": "–ì–ª–∞–∂–∫–∞ (285 000 / —á–∞—Å)", "type": "per_hour", "price": 285000},
    "balcony": {"name": "–ë–∞–ª–∫–æ–Ω (135 000 –∑–∞ –µ–¥.)", "type": "per_unit", "price": 135000},
    "second_wc": {"name": "–í—Ç–æ—Ä–æ–π —Å–∞–Ω—É–∑–µ–ª (150 000 –∑–∞ –µ–¥.)", "type": "per_unit", "price": 150000},
    "organize": {"name": "–†–∞–∑–ª–æ–∂–∏—Ç—å –≤–µ—â–∏ (220 000 / —á–∞—Å)", "type": "per_hour", "price": 220000},
    "pet_litter": {"name": "–õ–æ—Ç–æ–∫ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö (100 000 –∑–∞ –µ–¥.)", "type": "per_unit", "price": 100000},
    "chair": {"name": "–•–∏–º—á–∏—Å—Ç–∫–∞: —Å—Ç—É–ª (100 000)", "type": "per_unit", "price": 100000},
    "armchair": {"name": "–•–∏–º—á–∏—Å—Ç–∫–∞: –∫—Ä–µ—Å–ª–æ (160 000)", "type": "per_unit", "price": 160000},
    "sofa_2": {"name": "–•–∏–º—á–∏—Å—Ç–∫–∞: –¥–∏–≤–∞–Ω 2-–º–µ—Å—Ç–Ω—ã–π (550 000)", "type": "per_unit", "price": 550000},
    "sofa_3": {"name": "–•–∏–º—á–∏—Å—Ç–∫–∞: –¥–∏–≤–∞–Ω 3-–º–µ—Å—Ç–Ω—ã–π (630 000)", "type": "per_unit", "price": 630000},
    "sofa_extra": {"name": "–•–∏–º—á–∏—Å—Ç–∫–∞: –¥–æ–ø. –º–µ—Å—Ç–æ (130 000)", "type": "per_unit", "price": 130000},
    "mattress_1": {"name": "–ú–∞—Ç—Ä–∞—Å –æ–¥–Ω–æ—Å–ø–∞–ª—å–Ω—ã–π (260 000)", "type": "per_unit", "price": 260000},
    "mattress_2": {"name": "–ú–∞—Ç—Ä–∞—Å –¥–≤—É—Å–ø–∞–ª—å–Ω—ã–π (410 000)", "type": "per_unit", "price": 410000},
    "pillow": {"name": "–ü–æ–¥—É—à–∫–∞ (60 000)", "type": "per_unit", "price": 60000},
    "blanket": {"name": "–û–¥–µ—è–ª–æ/–ø–ª–µ–¥ (350 000)", "type": "per_unit", "price": 350000},
    "carpet": {"name": "–ö–æ–≤–µ—Ä (–æ—Ç 215 000 ‚Äî —É—Ç–æ—á–Ω—è–µ—Ç—Å—è)", "type": "per_unit", "price": 215000},
}

# === –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã ===
PLANS = {
    "combo": {
        "name": "–ö–æ–º–±–æ (3 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ + 1 –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è / –º–µ—Å—è—Ü)",
        "sizes": {60: 2652000, 80: 2808000, 100: 3120000, 120: 3802500},
    },
    "standard_month": {
        "name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç (2 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ / –º–µ—Å—è—Ü)",
        "sizes": {60: 972000, 80: 1224000, 100: 1440000, 130: 2152500},
    },
    "cozy": {
        "name": "–£—é—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ (1 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è + 1 –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è / –º–µ—Å—è—Ü)",
        "sizes": {60: 1134000, 80: 1428000, 100: 1680000, 130: 2730000},
    },
}

# ===== –°–æ—Å—Ç–æ—è–Ω–∏—è FSM =====
class Order(StatesGroup):
    choosing_category = State()
    choosing_tariff = State()
    input_area = State()
    choose_extras = State()
    extras_menu = State()
    extras_value = State()
    gather_name = State()
    gather_phone = State()
    gather_address = State()
    gather_datetime = State()
    gather_comment = State()
    confirm = State()

def main_menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üßπ –†–∞–∑–æ–≤–∞—è —É–±–æ—Ä–∫–∞", "üìÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã")
    kb.add("‚ûï –î–æ–ø. —É—Å–ª—É–≥–∏", "üí¨ –û–ø–µ—Ä–∞—Ç–æ—Ä")
    return kb

def tariffs_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞", "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞")
    kb.add("–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", "–ß–∏—Å—Ç—ã–π —Å—Ç–∞—Ä—Ç")
    kb.add("–ö—É—Ö–Ω—è+—Å–∞–Ω—É–∑–µ–ª (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)", "–ö—É—Ö–Ω—è+—Å–∞–Ω—É–∑–µ–ª (–≥–µ–Ω–µ—Ä–∞–ª.)")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def yes_no_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–î–∞", "–ù–µ—Ç")
    return kb

def extras_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–û–∫–Ω–∞ 90k", "–û–∫–Ω–∞ 110k", "–°—Ç–µ–Ω—ã")
    kb.add("–õ–µ—Å—Ç–Ω–∏—Ü–∞", "–°—Ç—Ä–µ–º—è–Ω–∫–∞", "–°—Ç–∏—Ä–∫–∞", "–ì–ª–∞–∂–∫–∞")
    kb.add("–ë–∞–ª–∫–æ–Ω", "2-–π —Å–∞–Ω—É–∑–µ–ª", "–†–∞–∑–ª–æ–∂–∏—Ç—å –≤–µ—â–∏", "–õ–æ—Ç–æ–∫")
    kb.add("–°—Ç—É–ª", "–ö—Ä–µ—Å–ª–æ", "–î–∏–≤–∞–Ω 2–º", "–î–∏–≤–∞–Ω 3–º", "–î–æ–ø –º–µ—Å—Ç–æ")
    kb.add("–ú–∞—Ç—Ä–∞—Å 1—Å–ø", "–ú–∞—Ç—Ä–∞—Å 2—Å–ø", "–ü–æ–¥—É—à–∫–∞", "–û–¥–µ—è–ª–æ/–ø–ª–µ–¥", "–ö–æ–≤–µ—Ä")
    kb.add("‚úÖ –ì–æ—Ç–æ–≤–æ")
    return kb

def plans_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ö–æ–º–±–æ", "–°—Ç–∞–Ω–¥–∞—Ä—Ç (–º–µ—Å.)", "–£—é—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def sizes_kb(sizes):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    row = []
    for s in sizes:
        row.append(f"{s} –∫–≤.–º")
        if len(row) == 3:
            kb.add(*row); row = []
    if row:
        kb.add(*row)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def fmt_money(n):
    return f"{n:,}".replace(",", " ")

def order_summary(data):
    lines = []
    lines.append(f"<b>{data.get('service_name','–ó–∞–∫–∞–∑')}</b>")
    if 'area' in data and data['area']:
        lines.append(f"–ü–ª–æ—â–∞–¥—å: {data['area']} –∫–≤.–º")
    lines.append("")
    lines.append("<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>")
    for item in data['items']:
        lines.append(f"‚Ä¢ {item['name']}: {fmt_money(item['amount'])} —Å—É–º")
    lines.append("")
    lines.append(f"<b>–ò—Ç–æ–≥–æ: {fmt_money(data['total'])} —Å—É–º</b>")
    lines.append("")
    if data.get("name"):
        lines.append(f"–ö–ª–∏–µ–Ω—Ç: {data['name']}")
    if data.get("phone"):
        lines.append(f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}")
    if data.get("address"):
        lines.append(f"–ê–¥—Ä–µ—Å: {data['address']}")
    if data.get("when"):
        lines.append(f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {data['when']}")
    if data.get("comment"):
        lines.append(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}")
    return "\n".join(lines)

@dp.message_handler(commands=["start"])
async def start(m: types.Message, state: FSMContext):
    await state.finish()
    await m.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>OneTouch Group</b>!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu_kb()
    )
    await Order.choosing_category.set()

@dp.message_handler(lambda msg: msg.text == "üí¨ –û–ø–µ—Ä–∞—Ç–æ—Ä", state="*")
async def operator(m: types.Message, state: FSMContext):
    await m.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", reply_markup=main_menu_kb())

@dp.message_handler(lambda msg: msg.text == "üßπ –†–∞–∑–æ–≤–∞—è —É–±–æ—Ä–∫–∞", state=Order.choosing_category)
async def choose_tariff(m: types.Message, state: FSMContext):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–±–æ—Ä–∫–∏:", reply_markup=tariffs_kb())
    await Order.choosing_tariff.set()

@dp.message_handler(lambda msg: msg.text == "üìÖ –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã", state=Order.choosing_category)
async def choose_plan(m: types.Message, state: FSMContext):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç:", reply_markup=plans_kb())

@dp.message_handler(lambda msg: msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", state="*")
async def back_to_menu(m: types.Message, state: FSMContext):
    await state.finish()
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await Order.choosing_category.set()

# ===== –ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã =====
@dp.message_handler(lambda msg: msg.text in ["–ö–æ–º–±–æ", "–°—Ç–∞–Ω–¥–∞—Ä—Ç (–º–µ—Å.)", "–£—é—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫"], state="*")
async def plan_sizes(m: types.Message, state: FSMContext):
    mapping = {
        "–ö–æ–º–±–æ": "combo",
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç (–º–µ—Å.)": "standard_month",
        "–£—é—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫": "cozy",
    }
    key = mapping[m.text]
    await state.update_data(plan_key=key, service_name=PLANS[key]["name"])
    sizes = list(PLANS[key]["sizes"].keys())
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥—å:", reply_markup=sizes_kb(sizes))

@dp.message_handler(lambda msg: msg.text.endswith("–∫–≤.–º"), state="*")
async def plan_total(m: types.Message, state: FSMContext):
    data = await state.get_data()
    if "plan_key" not in data:
        return
    size = int(m.text.split()[0])
    price = PLANS[data["plan_key"]]["sizes"][size]
    await state.update_data(
        items=[{"name": f"{PLANS[data['plan_key']]['name']} ‚Äî {size} –∫–≤.–º", "amount": price}],
        total=price,
        area=size,
    )
    await m.answer(
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{fmt_money(price)} —Å—É–º</b>\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=types.ReplyKeyboardRemove()
    )
    await Order.gather_phone.set()

# ===== –†–∞–∑–æ–≤–∞—è —É–±–æ—Ä–∫–∞ =====
@dp.message_handler(lambda msg: msg.text in [
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞", "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞", "–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞", "–ß–∏—Å—Ç—ã–π —Å—Ç–∞—Ä—Ç",
    "–ö—É—Ö–Ω—è+—Å–∞–Ω—É–∑–µ–ª (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)", "–ö—É—Ö–Ω—è+—Å–∞–Ω—É–∑–µ–ª (–≥–µ–Ω–µ—Ä–∞–ª.)"
], state=Order.choosing_tariff)
async def selected_tariff(m: types.Message, state: FSMContext):
    mapping = {
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–±–æ—Ä–∫–∞": "standard",
        "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞": "general",
        "–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞": "post_renovation",
        "–ß–∏—Å—Ç—ã–π —Å—Ç–∞—Ä—Ç": "clean_start",
        "–ö—É—Ö–Ω—è+—Å–∞–Ω—É–∑–µ–ª (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)": "kitchen_bath_standard",
        "–ö—É—Ö–Ω—è+—Å–∞–Ω—É–∑–µ–ª (–≥–µ–Ω–µ—Ä–∞–ª.)": "kitchen_bath_general",
    }
    tkey = mapping[m.text]
    tariff = RATES[tkey]
    await state.update_data(tariff_key=tkey, service_name=tariff["name"], items=[])
    if tariff.get("needs_area"):
        await m.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å (–≤ –∫–≤.–º), –Ω–∞–ø—Ä–∏–º–µ—Ä: 60", reply_markup=types.ReplyKeyboardRemove())
        await Order.input_area.set()
    else:
        amount = tariff["fixed"]
        data = await state.get_data()
        data["items"].append({"name": tariff["name"], "amount": amount})
        await state.update_data(items=data["items"], total=amount)
        await m.answer(
            f"–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{fmt_money(amount)} —Å—É–º</b>\n"
            "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. —É—Å–ª—É–≥–∏?", reply_markup=yes_no_kb()
        )
        await Order.choose_extras.set()

@dp.message_handler(lambda msg: msg.text.isdigit(), state=Order.input_area)
async def got_area(m: types.Message, state: FSMContext):
    area = int(m.text)
    data = await state.get_data()
    tariff = RATES[data["tariff_key"]]
    base = area * tariff["per_m2"]
    if base < tariff["min"]:
        base = tariff["min"]
    items = data["items"]
    items.append({"name": f"{tariff['name']} ‚Äî {area} –∫–≤.–º", "amount": base})
    await state.update_data(area=area, items=items, total=base)
    await m.answer(
        f"–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{fmt_money(base)} —Å—É–º</b>\n"
        "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. —É—Å–ª—É–≥–∏?", reply_markup=yes_no_kb()
    )
    await Order.choose_extras.set()

@dp.message_handler(lambda msg: msg.text in ["–î–∞", "–ù–µ—Ç"], state=Order.choose_extras)
async def extras_decision(m: types.Message, state: FSMContext):
    if m.text == "–î–∞":
        await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø. —É—Å–ª—É–≥—É (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.", reply_markup=extras_kb())
        await Order.extras_menu.set()
    else:
        await m.answer("–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove())
        await Order.gather_name.set()

@dp.message_handler(lambda msg: msg.text == "‚úÖ –ì–æ—Ç–æ–≤–æ", state=Order.extras_menu)
async def extras_done(m: types.Message, state: FSMContext):
    await m.answer("–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove())
    await Order.gather_name.set()

@dp.message_handler(state=Order.extras_menu)
async def extras_choose(m: types.Message, state: FSMContext):
    text = m.text
    mapping = {
        "–û–∫–Ω–∞ 90k": "windows_90",
        "–û–∫–Ω–∞ 110k": "windows_110",
        "–°—Ç–µ–Ω—ã": "walls",
        "–õ–µ—Å—Ç–Ω–∏—Ü–∞": "staircase",
        "–°—Ç—Ä–µ–º—è–Ω–∫–∞": "ladder",
        "–°—Ç–∏—Ä–∫–∞": "laundry",
        "–ì–ª–∞–∂–∫–∞": "ironing",
        "–ë–∞–ª–∫–æ–Ω": "balcony",
        "2-–π —Å–∞–Ω—É–∑–µ–ª": "second_wc",
        "–†–∞–∑–ª–æ–∂–∏—Ç—å –≤–µ—â–∏": "organize",
        "–õ–æ—Ç–æ–∫": "pet_litter",
        "–°—Ç—É–ª": "chair",
        "–ö—Ä–µ—Å–ª–æ": "armchair",
        "–î–∏–≤–∞–Ω 2–º": "sofa_2",
        "–î–∏–≤–∞–Ω 3–º": "sofa_3",
        "–î–æ–ø –º–µ—Å—Ç–æ": "sofa_extra",
        "–ú–∞—Ç—Ä–∞—Å 1—Å–ø": "mattress_1",
        "–ú–∞—Ç—Ä–∞—Å 2—Å–ø": "mattress_2",
        "–ü–æ–¥—É—à–∫–∞": "pillow",
        "–û–¥–µ—è–ª–æ/–ø–ª–µ–¥": "blanket",
        "–ö–æ–≤–µ—Ä": "carpet",
    }
    if text not in mapping:
        await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª.")
        return
    ekey = mapping[text]
    extra = EXTRAS[ekey]
    await state.update_data(current_extra_key=ekey)
    if extra["type"] == "fixed":
        # —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º
        data = await state.get_data()
        items = data.get("items", [])
        items.append({"name": extra["name"], "amount": extra["price"]})
        total = sum(i["amount"] for i in items)
        await state.update_data(items=items, total=total, current_extra_key=None)
        await m.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {extra['name']} ‚Äî {fmt_money(extra['price'])} —Å—É–º\n–ò—Ç–æ–≥–æ: {fmt_money(total)} —Å—É–º")
    elif extra["type"] in ("per_unit", "per_hour"):
        label = "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" if extra["type"] == "per_unit" else "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"
        await m.answer(f"–£–∫–∞–∂–∏—Ç–µ {label} –¥–ª—è ¬´{extra['name']}¬ª (—á–∏—Å–ª–æ–º):")
        await Order.extras_value.set()

@dp.message_handler(state=Order.extras_value)
async def extras_value(m: types.Message, state: FSMContext):
    if not m.text.isdigit():
        await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ.")
        return
    qty = int(m.text)
    data = await state.get_data()
    ekey = data.get("current_extra_key")
    if not ekey:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Å–ª—É–≥—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await Order.extras_menu.set()
        return
    extra = EXTRAS[ekey]
    amount = extra["price"] * qty
    name = f"{extra['name']} √ó {qty}"
    items = data.get("items", [])
    items.append({"name": name, "amount": amount})
    total = sum(i["amount"] for i in items)
    await state.update_data(items=items, total=total, current_extra_key=None)
    await m.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {name} ‚Äî {fmt_money(amount)} —Å—É–º\n–ò—Ç–æ–≥–æ: {fmt_money(total)} —Å—É–º")
    await Order.extras_menu.set()

# ===== –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ =====
@dp.message_handler(state=Order.gather_name)
async def get_name(m: types.Message, state: FSMContext):
    await state.update_data(name=m.text.strip())
    await m.answer("–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +998XXXXXXXXX):")
    await Order.gather_phone.set()

@dp.message_handler(state=Order.gather_phone)
async def get_phone(m: types.Message, state: FSMContext):
    await state.update_data(phone=m.text.strip())
    await m.answer("–ê–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):")
    await Order.gather_address.set()

@dp.message_handler(state=Order.gather_address)
async def get_address(m: types.Message, state: FSMContext):
    await state.update_data(address=m.text.strip())
    await m.answer("–£–¥–æ–±–Ω—ã–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.08, 10:00):")
    await Order.gather_datetime.set()

@dp.message_handler(state=Order.gather_datetime)
async def get_datetime(m: types.Message, state: FSMContext):
    await state.update_data(when=m.text.strip())
    await m.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–ø–æ–∂–µ–ª–∞–Ω–∏—è (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª):")
    await Order.gather_comment.set()

@dp.message_handler(state=Order.gather_comment)
async def get_comment(m: types.Message, state: FSMContext):
    comment = m.text.strip()
    if comment == "-":
        comment = ""
    await state.update_data(comment=comment)
    data = await state.get_data()
    text = order_summary(data)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚Ü©Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å")
    await m.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑:\n\n" + text, reply_markup=kb)
    await Order.confirm.set()

@dp.message_handler(lambda msg: msg.text == "‚Ü©Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å", state=Order.confirm)
async def change_order(m: types.Message, state: FSMContext):
    await m.answer("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å? –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu_kb())
    await Order.choosing_category.set()

@dp.message_handler(lambda msg: msg.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", state=Order.confirm)
async def confirm_order(m: types.Message, state: FSMContext):
    data = await state.get_data()
    text = "üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n" + order_summary(data)
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(ADMIN_CHAT_ID, text)
        except Exception:
            pass
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await m.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=main_menu_kb())
    await state.finish()

# ===== –î–æ–ø. —É—Å–ª—É–≥–∏ –æ—Ç–¥–µ–ª—å–Ω–æ =====
@dp.message_handler(lambda msg: msg.text == "‚ûï –î–æ–ø. —É—Å–ª—É–≥–∏", state=Order.choosing_category)
async def only_extras(m: types.Message, state: FSMContext):
    await state.update_data(service_name="–î–æ–ø. —É—Å–ª—É–≥–∏", items=[], total=0)
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø. —É—Å–ª—É–≥—É (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.", reply_markup=extras_kb())
    await Order.extras_menu.set()

if __name__ == "__main__":
    print("Bot started (polling).")
    executor.start_polling(dp, skip_updates=True)
